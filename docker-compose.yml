version: '3.8'
x-airflow-common:
  &airflow-common
  # In order to add custom dependencies or upgrade provider packages you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.7.3-python3.10}
  # build: .
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    # For backward compatibility, with Airflow <2.3
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    # AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    # AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    # yamllint disable rule:line-length
    # Use simple http server on scheduler for health checks
    # See https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/check-health.html#scheduler-health-check-server
    # yamllint enable rule:line-length
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    # WARNING: Use _PIP_ADDITIONAL_REQUIREMENTS option ONLY for a quick checks
    # for other purpose (development, test and especially production usage) build/extend Airflow image.
    # _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    SCRAPER_URL: ${SCRAPER_URL}
    DB_NAME: ${POSTGRES_DB_PROD}
    DB_USER: ${DB_USER_PROD}
    DB_PASS: ${DB_PASS_PROD}
    # AIRFLOW__METRICS__STATSD_ON: 'True'
    # AIRFLOW__METRICS__STATSD_HOST: statsd-exporter
    # AIRFLOW__METRICS__STATSD_PORT: 8125
    # AIRFLOW__METRICS__STATSD_PREFIX: airflow
    AIRFLOW__SCHEDULER__STATSD_ON: 'True'
    AIRFLOW__SCHEDULER__STATSD_HOST: statsd-exporter
    AIRFLOW__SCHEDULER__STATSD_PORT: 8125
    AIRFLOW__SCHEDULER__STATSD_PREFIX: airflow
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
    - /var/run/docker.sock:/var/run/docker.sock
  user: "${AIRFLOW_UID:-50000}:0"
  group_add:
      - '999'  # Docker group ID
  depends_on:
    &airflow-common-depends-on
    postgres:
      condition: service_healthy
    db_prod:
      condition: service_healthy

services:
  postgres:
    image: postgres:13.0
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    
  db_prod:
    build: 
      context: .
      dockerfile: Dockerfile.postgres.prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB_PROD}
      POSTGRES_USER: ${POSTGRES_USER_PROD}
      POSTGRES_PASSWORD: ${POSTGRES_PASS_PROD}
      DB_USER: ${DB_USER_PROD}
      DB_PASS: ${DB_PASS_PROD}
    volumes:
      - db-data-prod:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER_PROD} -d ${POSTGRES_DB_PROD}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  db_test:
    build: 
      context: .
      dockerfile: Dockerfile.postgres.test
    environment:
      POSTGRES_DB: ${POSTGRES_DB_TEST}
      POSTGRES_USER: ${POSTGRES_USER_TEST}
      POSTGRES_PASSWORD: ${POSTGRES_PASS_TEST}
      DB_USER: ${DB_USER_TEST}
      DB_PASS: ${DB_PASS_TEST}
    volumes:
      - db-data-test:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER_TEST} -d ${POSTGRES_DB_TEST}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  flyway_prod:
    build: 
      context: .
      dockerfile: Dockerfile.flyway
    image: styx_flyway:prod
    environment:
      ENVIRONMENT: prod
      POSTGRES_DB: ${POSTGRES_DB_PROD}
      POSTGRES_USER: ${POSTGRES_USER_PROD}
      POSTGRES_PASSWORD: ${POSTGRES_PASS_PROD}
      DB_USER: ${DB_USER_PROD}
      DB_PASS: ${DB_PASS_PROD}
      DB_PORT: 5432
    depends_on:
      db_prod:
        condition: service_healthy

  flyway_test:
    build: 
      context: .
      dockerfile: Dockerfile.flyway
    image: styx_flyway:test
    environment:
      ENVIRONMENT: test
      POSTGRES_DB: ${POSTGRES_DB_TEST}
      POSTGRES_USER: ${POSTGRES_USER_TEST}
      POSTGRES_PASSWORD: ${POSTGRES_PASS_TEST}
      DB_USER: ${DB_USER_TEST}
      DB_PASS: ${DB_PASS_TEST}
      DB_PORT: 5433
    command: tail -f /dev/null
    depends_on:
      db_test:
        condition: service_healthy

  airflow-webserver:
    <<: *airflow-common
    build:
      context: .
      dockerfile: Dockerfile.airflow
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  scraper:
    build:
      context: styx_app/scraper_service
      dockerfile: Dockerfile
    image: styx_scraper_img
    environment:
      DB_HOST: db_prod
      DB_NAME: ${POSTGRES_DB_PROD}
      DB_USER: ${DB_USER_PROD}
      DB_PASS: ${DB_PASS_PROD}
      SCRAPER_URL: ${SCRAPER_URL}
    volumes:
      - ./logs:/var/log
    depends_on:
      db_prod:
        condition: service_healthy

  inference_api:
    build:
        context: styx_app/model_inference_api
        dockerfile: Dockerfile
    image: inference_api_img
    environment:
      REL_API_URL: ${REL_API_URL}
    ports:
      - "8001:8001"

  data_provider_api_test:
    build:
        context: ./styx_app/
        dockerfile: ./data_provider_api/Dockerfile.test
    image: data_provider_api_test_img
    environment:
      DB_HOST: db_test
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB_TEST}
      DB_USER: ${DB_USER_TEST}
      DB_PASS: ${DB_PASS_TEST}
      # ENVIRONMENT: test
      # LOG_DIR: /home/ec2-user/projects/styx/logs_test
    ports:
      - "8003:8003"
    volumes:
      - ./logs_test:/var/log/
    depends_on:
      db_test:
        condition: service_healthy

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        airflow_version=$$(AIRFLOW__LOGGING__LOGGING_LEVEL=INFO && gosu airflow airflow version)
        airflow_version_comparable=$$(ver $${airflow_version})
        min_airflow_version=2.2.0
        min_airflow_version_comparable=$$(ver $${min_airflow_version})
        if (( airflow_version_comparable < min_airflow_version_comparable )); then
          echo
          echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
          echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
          echo
          exit 1
        fi
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow

  statsd-exporter:
    image: prom/statsd-exporter:v0.26.0
    container_name: airflow-statsd-exporter
    command: "--statsd.listen-udp=:8125 --web.listen-address=:9102"
    ports:
        - 9123:9102
        - 8125:8125/udp
    # depends_on:
    #   airflow-webserver:
    #     condition: service_healthy
    # restart: always

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    ports:
      - 9187:9187
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER_PROD}:${POSTGRES_PASS_PROD}@db_prod:5432/${POSTGRES_DB_PROD}?sslmode=disable"
    links:
      - db_prod
      - prometheus
    
  prometheus:
    image: prom/prometheus:v2.48.0
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    ports:
      - '9090:9090'
    depends_on:
      airflow-webserver:
        condition: service_healthy
    #   - airflow-webserver  # Assuming Prometheus will scrape metrics from Airflow
    restart: always

  # alertmanager:
  #   image: prom/alertmanager:v0.26.0
  #   volumes:
  #     - ./alertmanager:/etc/alertmanager
  #   command:
  #     - '--config.file=/etc/alertmanager/alertmanager.yml'
  #     - '--storage.path=/alertmanager'
  #   ports:
  #     - 9093:9093
  #   depends_on:
  #     - prometheus

  grafana:
    image: grafana/grafana:10.2.2
    volumes:
      - grafana-data:/var/lib/grafana
      # - ./grafana:/etc/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/etc/grafana/dashboards
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASS}
      GF_USERS_ALLOW_SIGN_UP: 'false'
      GF_DATASOURCES_DEFAULT_NAME: "Prometheus"
      GF_DATASOURCES_DEFAULT_TYPE: "prometheus"
      GF_DATASOURCES_DEFAULT_URL: "http://prometheus:9090"
      GF_DATASOURCES_DEFAULT_ACCESS: "proxy"
    ports:
      - '3000:3000'
    depends_on:
      - prometheus
    restart: always

  jupyterlab:
    build:
      context: .
      dockerfile: Dockerfile.jupyter
    environment:
      DB_HOST: db_prod
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB_PROD}
      DB_USER: ${DB_USER_PROD}
      DB_PASS: ${DB_PASS_PROD}
      JUPYTER_ENABLE_LAB: 'yes'
      JUPYTER_TOKEN: ${JUPYTER_TOKEN}
    volumes:
      - ./data/external:/home/jovyan/data/external:ro
      - ./data/postgres_data:/home/jovyan/data/postgres_data:ro
      - ./data/REL:/home/jovyan/data/REL:ro
      - ./data/interim:/home/jovyan/data/interim:rw
      - ./notebooks:/home/jovyan/notebooks:rw
    ports:
      - "8888:8888"

  rel:
    image: informagi/rel:docker_build2-f2845be
    volumes:
      - ./data/REL:/workspace/data:ro
    ports:
      - "5555:5555"
    command: python -m REL.server --bind 0.0.0.0 --port 5555 /workspace/data wiki_2019
    tty: true
    stdin_open: true

volumes:
  db-data-prod:
  db-data-test:
  postgres-db-volume:
  prometheus-data:
  grafana-data:
